using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace ProjectEuler.Test
{
    [TestClass]
    public class ProblemTestFixture
    {
        private readonly Problems _problems = new Problems();

        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        [TestMethod]
        [Priority(1)]
        public void EulerProblem1Test()
        {
            var answer = _problems.Problem1();
            Assert.AreEqual(233168, answer);
        }

        /// <summary>
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        [TestMethod]
        [Priority(2)]
        public void EulerProblem2Test()
        {
            var answer = _problems.Problem2();
            Assert.AreEqual(4613732, answer);
        }

        /// <summary>
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        [TestMethod]
        public void EulerProblem3Test()
        {
            var answer = _problems.Problem3();
            Assert.AreEqual(4613732, answer);
        }

        /// <summary>
        /// Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.
        /// </summary>
        [TestMethod]
        public void EulerProblem4Test()
        {
            var answer = _problems.Problem4();
            Assert.AreEqual(906609, answer);
        }

        /// <summary>
        /// Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.
        /// </summary>
        [TestMethod]
        public void EulerProblem5Test()
        {
            var answer = _problems.Problem5();
            Assert.AreEqual(232792560, answer);
        }

        /// <summary>
        /// The sum of the squares of the first ten natural numbers is,
        /// 12 + 22 + ... + 102 = 385
        /// The square of the sum of the first ten natural numbers is,
        /// (1 + 2 + ... + 10)2 = 552 = 3025
        /// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 385 = 2640.
        /// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum..
        /// </summary>
        [TestMethod]
        public void EulerProblem6Test()
        {
            var answer = _problems.Problem6();
            Assert.AreEqual(25164150, answer);
        }

        /// <summary>
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        /// What is the 10,001st prime number?
        /// </summary>
        [TestMethod]
        public void EulerProblem7Test()
        {
            var answer = _problems.Problem7();
            Assert.AreEqual(104743, answer);
        }


        /// <summary>
        /// Find the greatest product of five consecutive digits in the 1000-digit number.
        /// </summary>
        [TestMethod]
        public void EulerProblem8Test()
        {
            var answer = _problems.Problem8();
            Assert.AreEqual(40824, answer);
        }

        /// <summary>
        /// Find the greatest product of five consecutive digits in the 1000-digit number.
        /// </summary>
        [TestMethod]
        public void EulerProblem9Test()
        {
            var answer = _problems.Problem9();
            Assert.AreEqual(31875000, answer);
        }

        /// <summary>
        /// Find the greatest product of five consecutive digits in the 1000-digit number.
        /// </summary>
        [TestMethod]
        public void EulerProblem10Test()
        {
            var answer = _problems.Problem10();
            Assert.AreEqual(142913828922, answer);
        }

        [TestMethod]
        public void EulerProblem11Test()
        {
            var answer = _problems.Problem11();
            Assert.AreEqual(70600674, answer);
        }

        /// <summary>
        /// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 
        /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        /// Let us list the factors of the first seven triangle numbers:
        /// 1: 1
        /// 3: 1,3
        /// 6: 1,2,3,6
        /// 10: 1,2,5,10
        /// 15: 1,3,5,15
        /// 21: 1,3,7,21
        /// 28: 1,2,4,7,14,28
        /// We can see that 28 is the first triangle number to have over five divisors.
        /// 
        /// What is the value of the first triangle number to have over five hundred divisors?
        /// </summary>
        [TestMethod]
        public void EulerProblem12Test()
        {
            var problems = new Problems();
            var answer = problems.Problem12();
            Assert.AreEqual(76576500, answer);
        }

        [TestMethod]
        public void EulerProblem13Test()
        {
            var answer = Problems.Problem13();
            Assert.AreEqual("5537376230", answer);
        }

        [TestMethod]
        public void EulerProblem14Test()
        {
            var answer = _problems.Problem14();
            Assert.AreEqual(837799, answer);
        }

        [TestMethod]
        public void EulerProblem15Test()
        {
            var answer = _problems.Problem15();
            Assert.AreEqual(137846528820, answer);
        }

        /// <summary>
        /// 215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
        /// What is the sum of the digits of the number 21000?
        /// </summary>
        [TestMethod]
        public void EulerProblem16Test()
        {
            var answer = Problems.Problem16();
            var x = new PrimesGenerator();
            Assert.AreEqual(1366, answer);
        }

        [TestMethod]
        public void EulerProblem19Test()
        {
            var answer = _problems.Problem19();
            Assert.AreEqual(171, answer);
        }

        /// <summary>
        /// n! means n  (n  1)  ...  3  2  1
        /// For example, 10! = 10  9  ...  3  2  1 = 3628800,
        /// and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
        /// Find the sum of the digits in the number 100!
        /// </summary>
        [TestMethod]
        public void EulerProblem20Test()
        {
            var answer = _problems.Problem20();
            Assert.AreEqual(648, answer);
        }

        /// <summary>
        /// Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
        /// If d(a) = b and d(b) = a, where a  b, then a and b are an amicable pair and each of a and b are called amicable numbers.
        /// For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
        /// Evaluate the sum of all the amicable numbers under 10000.
        /// </summary>
        [TestMethod]
        public void EulerProblem21Test()
        {
            var answer = _problems.Problem21();
            Assert.AreEqual(31626, answer);
        }

        [TestMethod]
        public void EulerProblem22Test()
        {
            var answer = _problems.Problem22();
            Assert.AreEqual(871198282, answer);
        }

        [TestMethod]
        public void EulerProblem23Test()
        {
            var answer = _problems.Problem23();
            Assert.AreEqual(4179871, answer);
        }

        /// <summary>
        /// A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
        /// 012   021   102   120   201   210
        /// What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
        /// </summary>
        [TestMethod]
        public void EulerProblem24Test()
        {
            var answer = _problems.Problem24();
            Assert.AreEqual(2783915460, answer);
        }

        /// <summary>
        /// What is the first term in the Fibonacci sequence to contain 1000 digits?
        /// </summary>
        [TestMethod]
        public void EulerProblem25Test()
        {
            var answer = _problems.Problem25();
            Assert.AreEqual(4782, answer);
        }

        [TestMethod]
        public void EulerProblem29Test()
        {
            var answer = _problems.Problem29();
            Assert.AreEqual(9183, answer);
        }

        [TestMethod]
        public void EulerProblem30Test()
        {
            var answer = _problems.Problem30();
            Assert.AreEqual(443839, answer);
        }

        [TestMethod]
        public void EulerProblem34Test()
        {
            var answer = _problems.Problem34();
            Assert.AreEqual(55, answer);
        }

        [TestMethod]
        public void EulerProblem35Test()
        {
            var answer = _problems.Problem35();
            Assert.AreEqual(55, answer);
        }

        [TestMethod]
        public void EulerProblem36Test()
        {
            var answer = _problems.Problem36();
            Assert.AreEqual(872187, answer);
        }

        [TestMethod]
        public void EulerProblem37Test()
        {
            var answer = _problems.Problem37();
            Assert.AreEqual(748317, answer);
        }


        [TestMethod]
        public void EulerProblem39Test()
        {
            var answer = _problems.Problem39();
            Assert.AreEqual(748317, answer);
        }

        /// <summary>
        /// Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.
        /// </summary>
        [TestMethod]
        public void EulerProblem48Test()
        {
            var answer = _problems.Problem48();
            Assert.AreEqual("9110846700", answer);
        }

        /// <summary>
        /// 
        /// </summary>z
        [TestMethod]
        public void EulerProblem50Test()
        {
            var answer = _problems.Problem50();
            Assert.AreEqual(997651, answer);
        }

        /// <summary>
        /// It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.
        /// Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
        /// </summary>
        [TestMethod]
        public void EulerProblem52Test()
        {
            var answer = _problems.Problem52();
            Assert.AreEqual(142857, answer);
        }
    }
}
